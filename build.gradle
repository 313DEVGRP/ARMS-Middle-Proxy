buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'com.palantir.docker' version '0.28.0'
    id 'maven-publish'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

import org.apache.tools.ant.taskdefs.condition.Os
ext {
    image = "313devgrp/java-service-tree-framework-middle-proxy"

    artifactType = System.getenv("ARTIFACT_TYPE") ? System.getenv("ARTIFACT_TYPE").toUpperCase() : "SNAPSHOT"
    repositoryType = "${artifactType}".equalsIgnoreCase("RELEASE") ? "release" : "snapshot"
    //업로드 타입 정의 ( maven-release, maven-snapshot, ${repositoryType})
    repositoryUrl = "http://www.313.co.kr/nexus/repository/ple-releases"
    metadataUrl = "${repositoryUrl}/313devgrp/java-service-tree-framework-middle-proxy/maven-metadata.xml"

    //version 정보
    majorVersion = 22
    minorVersion = 11
    //patchVersion = auto generation

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** Windows "
    }else if (Os.isFamily(Os.FAMILY_MAC)) {
        println "*** Mac "
    }else {
        exec {
            executable "wget"
            args "-O", "${projectDir}/metadata.xml", "${metadataUrl}"
        }
    }
    def metadataFile = new XmlSlurper().parse(new File("${projectDir}/metadata.xml"))
    String latest = metadataFile."versioning"."latest"
    String versionPrefix = latest.split("-")[0]
    def (latestMajorVersion, latestMinorVersion, latestPatchVersion) = versionPrefix.tokenize(".")
    if ( majorVersion > latestMajorVersion.toInteger()){
        minorVersion = 0
        patchVersion = 0
    } else if (minorVersion > latestMinorVersion.toInteger()){
        patchVersion = 0
    } else {
        patchVersion = latestPatchVersion.toInteger() + 1
    }
}

group = "313devgrp"
version = "${majorVersion}.${minorVersion}.${patchVersion}"

bootJar {
    baseName = project.name
    version =  project.version
}

task generatePublishInfo {
    def targetFile = new File("${projectDir}/spinnaker.properties")
    targetFile.parentFile.mkdirs()
    targetFile.withWriter("UTF-8") { w ->
        w.writeLine "groupId = " + project.group
        w.writeLine "artifactId = " + project.name
        w.writeLine "version = " + project.version
    }
}

publish {
    dependsOn generatePublishInfo
}

def getMavenSettingsCredentials = {
    String userHome = System.getProperty("user.home")
    File mavenSettings = new File ( userHome, ".m2/settings.xml")

    if (Os.isFamily(Os.FAMILY_WINDOWS)||Os.isFamily(Os.FAMILY_MAC)) {
        if(!mavenSettings.exists()){
            mavenSettings = new File("${projectDir}/settings.xml")
        }
    }else {
        if(!mavenSettings.exists()){
            mavenSettings = new File ("${projectDir}/settings.xml")
        }
    }
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output."servers"."server"
}

def getCredentials = {
    def entries = getMavenSettingsCredentials()

    for ( entry in entries ) {
        if (project.version.endsWith("-SNAPSHOT") && entry."id".text() == "snapshots"){
            return [username: entry.username.text(), password: entry.password.text()]
        }else {
            return [username: entry.username.text(), password: entry.password.text()]
        }
    }
}

publishing {
    def mvnCredential = getCredentials()
    repositories {
        maven {
            credentials{
                username mvnCredential["username"]
                password mvnCredential["password"]
            }
            url "${repositoryUrl}"
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            artifact bootJar
        }
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.0"
        mavenBom "org.keycloak.bom:keycloak-adapter-bom:15.0.2"
    }
}

dependencies {

    implementation('org.projectlombok:lombok')

    // spring
    implementation('org.springframework.boot:spring-boot-starter-aop')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework:spring-context')

    //oauth
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
    implementation('org.springframework.boot:spring-boot-starter-oauth2-resource-server')
    implementation('org.springframework.security:spring-security-oauth2-jose')

    //redis
    implementation('org.springframework.session:spring-session-data-redis')
    implementation('io.lettuce:lettuce-core')

    // security

    // spring cloud gate way
    implementation('org.springframework.cloud:spring-cloud-starter-gateway')

    // keycloak
    implementation('org.keycloak:keycloak-spring-boot-starter'){
        exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
        exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-el'
        exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-websocket'
    }
    implementation('org.keycloak:keycloak-spring-security-adapter')
    implementation(group: 'org.keycloak', name: 'keycloak-admin-client', version: '16.1.1')

    // Swagger
    implementation('io.springfox:springfox-boot-starter:3.0.0')
    implementation('io.springfox:springfox-swagger-ui:3.0.0')

    // netty mac os dev용
    implementation ('io.netty:netty-resolver-dns-native-macos:4.1.90.Final:osx-aarch_64')

    // spring config
    //implementation 'org.springframework.cloud:spring-cloud-config-server'

    // Zipkin
    //implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
    //implementation('org.springframework.cloud:spring-cloud-starter-zipkin')


    annotationProcessor(
            'org.projectlombok:lombok'
    )
}



//
docker {
    name "${image}"
    noCache true
    tags "${project.version}"
    files tasks.bootJar.outputs.files, 'docker-entrypoint.sh'
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name, 'ENTRY_FILE': 'docker-entrypoint.sh'])
}
